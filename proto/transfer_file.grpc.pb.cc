// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: transfer_file.proto

#include "transfer_file.pb.h"
#include "transfer_file.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace transferfile {

static const char* TransferFile_method_names[] = {
  "/transferfile.TransferFile/Download",
};

std::unique_ptr< TransferFile::Stub> TransferFile::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TransferFile::Stub> stub(new TransferFile::Stub(channel, options));
  return stub;
}

TransferFile::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Download_(TransferFile_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::transferfile::Chunk>* TransferFile::Stub::DownloadRaw(::grpc::ClientContext* context, const ::transferfile::FileRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::transferfile::Chunk>::Create(channel_.get(), rpcmethod_Download_, context, request);
}

void TransferFile::Stub::async::Download(::grpc::ClientContext* context, const ::transferfile::FileRequest* request, ::grpc::ClientReadReactor< ::transferfile::Chunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::transferfile::Chunk>::Create(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::transferfile::Chunk>* TransferFile::Stub::AsyncDownloadRaw(::grpc::ClientContext* context, const ::transferfile::FileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::transferfile::Chunk>::Create(channel_.get(), cq, rpcmethod_Download_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::transferfile::Chunk>* TransferFile::Stub::PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::transferfile::FileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::transferfile::Chunk>::Create(channel_.get(), cq, rpcmethod_Download_, context, request, false, nullptr);
}

TransferFile::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TransferFile_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TransferFile::Service, ::transferfile::FileRequest, ::transferfile::Chunk>(
          [](TransferFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::transferfile::FileRequest* req,
             ::grpc::ServerWriter<::transferfile::Chunk>* writer) {
               return service->Download(ctx, req, writer);
             }, this)));
}

TransferFile::Service::~Service() {
}

::grpc::Status TransferFile::Service::Download(::grpc::ServerContext* context, const ::transferfile::FileRequest* request, ::grpc::ServerWriter< ::transferfile::Chunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace transferfile

